//图书馆有一个很大的书架，书架一共有n（1≤n≤103）层，
//第i层上放了ai (1 ≤ ai ≤ 103)本书。
//每本书用连续的数字进行了编号：
//第1层书架上的书从1号到a1号，第2层放的书是从a1+1号到a1 + a2号，以此类推。
//例如：当n等于2，a1为1，a2为3时，
//第1层书架上的1本书编号为1，第2层书架上的3本书编号依次为2、3、4。
//对于给定的书的编号，快速找到这本书在书架的第几层上。
//说明：数组定义时如果长度大于106，有些编译器需要定为外部变量。

//输入
//多个样例。 每个样例输入包括4行：
//第1行输入一个整数n (1≤n≤?103)，代表书架的层数。
//第2行输入n个整数a1, a2,?..., an (1≤ai ≤103,a1+a2+...+ an ≤106)，其中ai代表第i层书架上的书的数量。
//第3行输入一个整数m (1≤m≤103)代表小南要找的书的数量。
//第4行输入m个整数b1, b2,?...,bm(1?≤ bi ≤a1+a2+...+ an)，分别表示小南要找的m本书的编号。

//输出
//每个样例输出m行，第i行包含一个整数，代表编号为 bi的书所在的书架的层数

#include<stdio.h>
#include<string.h>
int main()
{
	int n;
	while(scanf("%d",&n)!=EOF)
	{
		long long int arr[1005]={0};
		int i=0;
		for(i=0;i<n;i++)
		{
			scanf("%lld",&arr[i]);
		}
		long long int m;
		scanf("%lld",&m);
		long long int book[1005]={0};
		i=0;
		for(i=0;i<m;i++)
		{
			scanf("%lld",&book[i]);
		}
		
		//书架为二维数组 
		
		//[j][0]是每层书架上的第一位
		//[j][1]是每层书架上的最后一位 
		long long int bookshelf[1005][1]={0};
		bookshelf[0][0]=1;
		bookshelf[0][1]=arr[0]; 
		int j=0;
		for(j=0;j<n-1;j++)
		{
			bookshelf[j+1][0]=bookshelf[j][1]+1;
			bookshelf[j+1][1]=bookshelf[j+1][0]+arr[j+1]-1;
		}
		
		j=0;
		for(j=0;j<m;j++)
		{
			long long int tmp=book[j];
			i=0;
			for(i=0;i<n;i++)
			{
				if(tmp>=bookshelf[i][0]&&tmp<=bookshelf[i][1])
				{
					printf("%d\n",i+1);
					break;
				}
			}
		}
		 
	}
	return 0;
}
